{
 "cells": [
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 329,
=======
   "execution_count": 59,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "a12c0368-5256-40ee-a565-362d3f40d30c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import random\n",
    "import pickle\n",
    "import networkx as nx\n",
<<<<<<< HEAD
    "import math"
=======
    "import matplotlib.pyplot as plt\n",
    "from itertools import combinations\n",
    "from collections import deque\n"
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 330,
=======
   "execution_count": 60,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "da0cdd4d-ca7f-4fa7-98a8-363e042b171c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "(125, 'graf_26.pkl')"
      ]
     },
     "execution_count": 330,
=======
       "(102, 'graf_19.pkl')"
      ]
     },
     "execution_count": 60,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def load_random_graph(graphs_folder):\n",
    "    graph_files = [f for f in os.listdir(graphs_folder) if f.endswith('.pkl')]\n",
    "    random_graph_file = random.choice(graph_files)\n",
    "    with open(os.path.join(graphs_folder, random_graph_file), 'rb') as f:\n",
    "        G = pickle.load(f)\n",
    "    return G, random_graph_file\n",
    "\n",
    "# Putanja do foldera sa grafovima\n",
    "graphs_folder = 'grafovi'\n",
    "\n",
    "# Učitavanje grafa\n",
    "G_global, graph_file_name = load_random_graph(graphs_folder)\n",
    "# G_info = nx.info(G)\n",
    "num_nodes = G_global.number_of_nodes()\n",
    "\n",
    "# G_info, num_nodes, graph_file_name\n",
    "num_nodes, graph_file_name"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 331,
=======
   "execution_count": 61,
   "id": "6eae7c43",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_graph_dict(graph):\n",
    "    \"\"\"\n",
    "    Convert a graph to a dictionary representation.\n",
    "\n",
    "    Parameters:\n",
    "    - graph: NetworkX Graph\n",
    "        The input graph.\n",
    "\n",
    "    Returns:\n",
    "    - graph_dict: dict\n",
    "        A dictionary representation of the graph where keys are nodes and values\n",
    "        are lists of neighbors.\n",
    "    \"\"\"\n",
    "    graph_dict = {node: list(neighbor) for node, neighbor in graph.adjacency()}\n",
    "    return graph_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "c10c80fd-5199-431b-a2d7-3d9ad79bc465",
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution_quality(solution):\n",
    "    return len(solution.nodes())"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 332,
=======
   "execution_count": 63,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "a3835c48-8e77-452c-b481-c7f74fc791b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def initialize_solution(G, k):\n",
    "    while True:\n",
    "        potential_solution = G.copy()\n",
    "        nodes_to_remove = random.sample(potential_solution.nodes(), k)\n",
    "        potential_solution.remove_nodes_from(nodes_to_remove)\n",
    "        if is_k_connected(create_graph_dict(potential_solution), k):\n",
    "            return potential_solution"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 333,
=======
   "execution_count": 64,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "b2955abb-e951-4cf4-a062-ae2119cc0230",
   "metadata": {},
   "outputs": [],
   "source": [
    "def local_search(G, k, current_solution):\n",
    "    # Ova funkcija treba da smanji broj čvorova u rešenju, ako je to moguće\n",
    "    # Proverava da li može da ukloni bilo koji čvor a da i dalje ostane k-vezan\n",
    "    print(\"Broj cvorova na ulasku u local_search() \")\n",
    "    print(current_solution.number_of_nodes())\n",
    "    temp_solution = current_solution.copy()\n",
    "    nodes = list(current_solution.nodes())\n",
    "    random.shuffle(nodes)\n",
    "    for node in nodes:\n",
    "        temp_solution.remove_node(node)\n",
<<<<<<< HEAD
    "        if not is_k_connected(temp_solution, k):\n",
    "            temp_solution.add_node(node)\n",
    "    print(\"Broj cvorova na izlasku iz local_search() \")\n",
    "    print(temp_solution.number_of_nodes())\n",
    "    return temp_solution"
=======
    "        if is_k_connected(create_graph_dict(temp_solution), k):\n",
    "            nodes_to_remove.append(node)\n",
    "    current_solution.remove_nodes_from(nodes_to_remove)\n",
    "    return current_solution"
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 334,
   "id": "65a9231e-9a56-4d58-8883-bb328e904a54",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_k_connected(G, k):\n",
    "    return nx.node_connectivity(G) >= k\n"
=======
   "execution_count": 65,
   "id": "360605d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_k_connected(graph, k):\n",
    "    # Funkcija za BFS pretragu grafa\n",
    "    def bfs(graph, start, excluded_nodes):\n",
    "        visited = set()\n",
    "        queue = deque([start])\n",
    "\n",
    "        while queue:\n",
    "            node = queue.popleft()\n",
    "            visited.add(node)\n",
    "\n",
    "            for neighbor in graph[node]:\n",
    "                if neighbor not in visited and neighbor not in excluded_nodes:\n",
    "                    queue.append(neighbor)\n",
    "\n",
    "        return visited\n",
    "\n",
    "    # Provera da li je graf povezan nakon uklanjanja k čvorova\n",
    "    def is_connected_after_removal(excluded_nodes):\n",
    "        remaining_nodes = set(graph.keys()) - set(excluded_nodes)\n",
    "    \n",
    "        try:\n",
    "            start_node = next(iter(remaining_nodes))\n",
    "            visited_nodes = bfs(graph, start_node, excluded_nodes)\n",
    "            return len(visited_nodes) == len(remaining_nodes)\n",
    "        except StopIteration:\n",
    "        # Handle the case when remaining_nodes is empty\n",
    "            return False\n",
    "\n",
    "\n",
    "    # Iteracija kroz sve kombinacije k čvorova\n",
    "    all_nodes = list(graph.keys())\n",
    "    for excluded_nodes in combinations(all_nodes, k):\n",
    "        if is_connected_after_removal(excluded_nodes):\n",
    "            return True\n",
    "\n",
    "    return False\n"
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 335,
=======
   "execution_count": 66,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "458d9cd8-34f0-41b8-be28-4eae87e013d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def shaking(G, k, current_solution):\n",
    "    # Dodavanje ili uklanjanje čvorova ili ivica\n",
    "    modified_solution = current_solution.copy()\n",
    "    if random.choice([True, False]):\n",
    "        # Ukloni slučajno odabrane čvorove, ali ne manje od k\n",
    "        nodes_to_remove = random.sample(modified_solution.nodes(), k)\n",
    "        modified_solution.remove_nodes_from(nodes_to_remove)\n",
    "    else:\n",
    "        # Dodaj slučajno odabrane čvorove iz originalnog grafa\n",
    "        potential_nodes = list(set(G.nodes()) - set(modified_solution.nodes()))\n",
    "        nodes_to_add = random.sample(potential_nodes, math.floor(len(potential_nodes)/2))\n",
    "        modified_solution.add_nodes_from(nodes_to_add)\n",
    "        # Dodaj i odgovarajuće ivice\n",
    "        for node in nodes_to_add:\n",
    "            for neighbor in G.neighbors(node):\n",
    "                if neighbor in modified_solution:\n",
    "                    modified_solution.add_edge(node, neighbor)\n",
    "    \n",
    "    # Provera da li je i dalje k-vezan\n",
    "    if is_k_connected(create_graph_dict(modified_solution), k):\n",
    "        return modified_solution\n",
    "    else:\n",
    "        return current_solution\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 336,
   "id": "b6145023-8cfd-4ee0-9250-15961053b948",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_nodes_with_less_than_k_neighbors(G, k):\n",
    "    nodes_to_remove = [node for node in G.nodes if G.degree(node) < k]\n",
    "    G.remove_nodes_from(nodes_to_remove)\n",
    "    return G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "b6b02455-e979-4bab-a3ae-50581c8180e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from time import perf_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
=======
   "execution_count": 67,
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "id": "32b8b64b-9af1-4a82-812e-adf45af23f5b",
   "metadata": {},
   "outputs": [],
   "source": [
<<<<<<< HEAD
    "def vns_algorithm(G, k, max_iter=5):\n",
    "    # Inicijalizacija\n",
    "    # current_solution = initialize_solution(G, k)\n",
    "    # print(current_solution.number_of_nodes())\n",
    "    start_time = perf_counter()\n",
    "    G = remove_nodes_with_less_than_k_neighbors(G, k)\n",
    "    best_solution = G.copy()\n",
    "    print(G.number_of_nodes())\n",
    "    while perf_counter() - start_time < 2:\n",
    "        # Shaking\n",
    "        shaken_solution = shaking(G, k, best_solution)\n",
=======
    "def vns_algorithm(G, k, max_iter=100, convergence_threshold=10):\n",
    "    # Inicijalizacija\n",
    "    current_solution = initialize_solution(G, k)\n",
    "    \n",
    "    # Inicijalizacija promenljive za praćenje broja iteracija bez poboljšanja\n",
    "    iterations_without_improvement = 0\n",
    "\n",
    "    for i in range(max_iter):\n",
    "        # Shaking\n",
    "        shaken_solution = shaking(G, k, current_solution)\n",
    "        \n",
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
    "        # Local search\n",
    "        new_solution = local_search(G, k, shaken_solution)\n",
    "        \n",
    "        # Ažuriranje trenutnog rešenja ako je novo rešenje bolje\n",
<<<<<<< HEAD
    "        if solution_quality(new_solution) < solution_quality(best_solution):\n",
    "            best_solution = new_solution.copy()\n",
    "    \n",
    "    return best_solution"
=======
    "        if solution_quality(new_solution) < solution_quality(current_solution):\n",
    "            current_solution = new_solution\n",
    "            iterations_without_improvement = 0\n",
    "        else:\n",
    "            iterations_without_improvement += 1\n",
    "        \n",
    "        print(G.number_of_nodes())\n",
    "        # Provera zaustavljanja na osnovu konvergencije\n",
    "        if iterations_without_improvement >= convergence_threshold:\n",
    "            print(\"Converged. Stopping the algorithm.\")\n",
    "            break\n",
    "        \n",
    "    return current_solution\n"
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "0a0da483-7495-47fd-8ac5-d66507507eda",
   "metadata": {},
<<<<<<< HEAD
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125\n",
      "Broj cvorova na ulasku u local_search() \n",
      "120\n",
      "Broj cvorova na izlasku iz local_search() \n",
      "36\n",
      "Broj cvorova poslednjeg grafa\n",
      "36\n"
     ]
    }
   ],
   "source": [
    "final_solution = vns_algorithm(G_global, 5, 10)\n",
    "print(\"Broj cvorova poslednjeg grafa\")\n",
    "print(final_solution.number_of_nodes())\n"
=======
   "outputs": [],
   "source": [
    "final_solution = vns_algorithm(G, 8, 4)\n",
    "\n"
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "536683d4-b5e6-4de0-abcf-4a54bfe2e50e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
<<<<<<< HEAD
   "id": "6a280a55-92b7-49c6-8fd0-3d4c1f666288",
=======
   "id": "7bd09502",
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
<<<<<<< HEAD
   "id": "0f933a92-9719-4dbb-8a10-0b4d8c0196cf",
=======
   "id": "9cadb22d",
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
<<<<<<< HEAD
   "id": "73072d44-46d9-4b83-a0de-a61f77ee02ab",
=======
   "id": "2868bd6f",
>>>>>>> 2a58094d7d11a505bd5c55cafca24680d8ba75de
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
